-- File: dftm.vhd
-- Generated by MyHDL 0.11
-- Date: Sat May 14 17:42:26 2022


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity dftm is
    port (
        clk_i: in std_logic;
        host_intf_rst_i: in std_logic;
        host_intf_rd_i: in std_logic;
        host_intf_wr_i: in std_logic;
        host_intf_addr_i: in unsigned(23 downto 0);
        host_intf_data_i: in unsigned(15 downto 0);
        host_intf_data_o: out unsigned(15 downto 0);
        host_intf_done_o: out std_logic;
        host_intf_rdPending_o: in std_logic;
        host_intf_sdram_rst_i: in std_logic;
        host_intf_sdram_rd_i: out std_logic;
        host_intf_sdram_wr_i: out std_logic;
        host_intf_sdram_addr_i: out unsigned(23 downto 0);
        host_intf_sdram_data_i: out unsigned(15 downto 0);
        host_intf_sdram_data_o: in unsigned(15 downto 0);
        host_intf_sdram_done_o: in std_logic;
        host_intf_sdram_rdPending_o: in std_logic
    );
end entity dftm;
-- INTERNAL RAM START

architecture MyHDL of dftm is


type t_enum_OPERATION_MODE_1 is (
	NORMAL,
	RECODING
	);
type t_enum_RECODING_MODE_2 is (
	READ,
	WAIT_READ,
	WRITE,
	WAIT_WRITE
	);

signal current_operation_mode: t_enum_OPERATION_MODE_1;
signal current_recoding_mode: t_enum_RECODING_MODE_2;
signal recode_count: unsigned(15 downto 0);
signal recode_position: unsigned(23 downto 0);
type t_array_ram is array(0 to 256-1) of unsigned(2 downto 0);
signal ram: t_array_ram;

function MYHDL2_get_position(
    addr: in unsigned;
    page_size: in natural
    ) return integer is
begin
    return to_integer(addr / page_size);
end function MYHDL2_get_position;

function MYHDL3_encoder(
    data: in unsigned;
    type: in unsigned
    ) return unsigned is
begin
    return data;
end function MYHDL3_encoder;

function MYHDL4_decoder(
    data: in unsigned;
    type: in unsigned
    ) return std_logic is
begin
    return '1';
end function MYHDL4_decoder;

begin




DFTM_MAIN: process (clk_i) is
    variable L: line;
    variable iram_current_position: integer;
    variable page_encode: unsigned(2 downto 0);
    variable decode_ok: std_logic;
begin
    if rising_edge(clk_i) then
        if (current_operation_mode = NORMAL) then
            iram_current_position := MYHDL2_get_position(host_intf_addr_i, 256);
            page_encode := ram(iram_current_position);
            host_intf_sdram_addr_i <= host_intf_addr_i;
            host_intf_sdram_data_i <= MYHDL3_encoder(host_intf_data_i, page_encode);
            host_intf_sdram_rd_i <= host_intf_rd_i;
            host_intf_sdram_wr_i <= host_intf_wr_i;
            if bool(host_intf_sdram_done_o) then
                host_intf_data_o <= host_intf_sdram_data_o;
                decode_ok := MYHDL4_decoder(host_intf_data_i, page_encode);
                -- FAKE ERR WHEN 120 
                decode_ok := stdl((not (bool(host_intf_rd_i) and (host_intf_addr_i = 120))));
                if (decode_ok = '0') then
                    write(L, string'("JOIN STATE FAKE"));
                    writeline(output, L);
                    current_operation_mode <= RECODING;
                    current_recoding_mode <= READ;
                    recode_position <= to_unsigned(iram_current_position, 24);
                    recode_count <= to_unsigned(0, 16);
                    host_intf_done_o <= '0';
                    host_intf_sdram_rd_i <= '0';
                    host_intf_sdram_wr_i <= '0';
                else
                    host_intf_done_o <= host_intf_sdram_done_o;
                end if;
            else
                host_intf_done_o <= host_intf_sdram_done_o;
                host_intf_data_o <= host_intf_sdram_data_o;
            end if;
        else
            write(L, string'("RECODING "));
            write(L, string'(" "));
            write(L, to_hstring(recode_position));
            writeline(output, L);
            if (current_recoding_mode = READ) then
                write(L, to_string(current_recoding_mode));
                writeline(output, L);
                current_recoding_mode <= WAIT_READ;
            end if;
            if (current_recoding_mode = WAIT_READ) then
                write(L, to_string(current_recoding_mode));
                writeline(output, L);
                current_recoding_mode <= WRITE;
            end if;
            if (current_recoding_mode = WRITE) then
                write(L, to_string(current_recoding_mode));
                writeline(output, L);
                current_recoding_mode <= WAIT_WRITE;
            end if;
            if (current_recoding_mode = WAIT_WRITE) then
                write(L, to_string(current_recoding_mode));
                writeline(output, L);
                host_intf_done_o <= '1';
                current_operation_mode <= NORMAL;
            end if;
        end if;
    end if;
end process DFTM_MAIN;

end architecture MyHDL;
