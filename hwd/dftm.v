// File: dftm.v
// Generated by MyHDL 0.11
// Date: Mon May 23 18:13:45 2022


`timescale 1ns/10ps

module dftm (
    clk_i,
    host_intf_rst_i,
    host_intf_rd_i,
    host_intf_wr_i,
    host_intf_addr_i,
    host_intf_data_i,
    host_intf_data_o,
    host_intf_done_o,
    host_intf_rdPending_o,
    host_intf_dftm_i,
    host_intf_sdram_rst_i,
    host_intf_sdram_rd_i,
    host_intf_sdram_wr_i,
    host_intf_sdram_addr_i,
    host_intf_sdram_data_i,
    host_intf_sdram_data_o,
    host_intf_sdram_done_o,
    host_intf_sdram_rdPending_o,
    host_intf_sdram_dftm_i
);


input clk_i;
input host_intf_rst_i;
input host_intf_rd_i;
input host_intf_wr_i;
input [23:0] host_intf_addr_i;
input [15:0] host_intf_data_i;
output [15:0] host_intf_data_o;
reg [15:0] host_intf_data_o;
output host_intf_done_o;
reg host_intf_done_o;
input host_intf_rdPending_o;
input host_intf_dftm_i;
input host_intf_sdram_rst_i;
output host_intf_sdram_rd_i;
reg host_intf_sdram_rd_i;
output host_intf_sdram_wr_i;
reg host_intf_sdram_wr_i;
output [23:0] host_intf_sdram_addr_i;
reg [23:0] host_intf_sdram_addr_i;
output [15:0] host_intf_sdram_data_i;
reg [15:0] host_intf_sdram_data_i;
output [15:0] host_intf_sdram_data_o;
reg [15:0] host_intf_sdram_data_o;
input host_intf_sdram_done_o;
input host_intf_sdram_rdPending_o;
input host_intf_sdram_dftm_i;

reg [1:0] current_operation_mode;
reg [2:0] current_recoding_mode;
reg in_read;
reg iram_send;
reg [23:0] recode_address;
reg [15:0] recode_count;
reg [15:0] recode_data_o;
reg [2:0] recode_from_ecc;
reg [15:0] recode_original_data;
reg [15:0] recode_position;
reg [2:0] recode_to_ecc;
reg [2:0] ram [0:256-1];


function integer MYHDL25_get_position;
    input [24-1:0] addr;
    input page_size;
    integer page_size;
begin: MYHDL36_RETURN
    MYHDL25_get_position = (addr / page_size);
    disable MYHDL36_RETURN;
end
endfunction

function integer MYHDL26_get_configuration;
    input [3-1:0] mem;
begin: MYHDL37_RETURN
    MYHDL26_get_configuration = (mem & 1);
    disable MYHDL37_RETURN;
end
endfunction

function integer MYHDL27_get_encode;
    input [3-1:0] mem;
begin: MYHDL38_RETURN
    MYHDL27_get_encode = (mem >>> 1);
    disable MYHDL38_RETURN;
end
endfunction

function MYHDL28_check;
    input data;
    integer data;
    input type;
    integer type;
    integer c;
    integer x;
    integer d;
    integer p0;
    integer p1;
    integer p2;
    integer p3;
    integer p4;
    integer check;
begin: MYHDL39_RETURN
    if ((type == 0)) begin
        MYHDL28_check = 1'b1;
        disable MYHDL39_RETURN;
    end
    if ((type == 1)) begin
        c = (data & 1);
        x = $signed(data >>> 1);
        x = x ^ $signed(x >>> 8);
        x = x ^ $signed(x >>> 4);
        x = x ^ $signed(x >>> 2);
        x = x ^ $signed(x >>> 1);
        x = ((~x) & 1);
        MYHDL28_check = (c == x);
        disable MYHDL39_RETURN;
    end
    if ((type == 2)) begin
        d = $signed(data >>> 5);
        p0 = ((((((((((d & 1) ^ ($signed(d >>> 1) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 4) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 11) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 15) & 1));
        p1 = (((((((((d & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1));
        p2 = ((((((((($signed(d >>> 1) & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        p3 = ((((((($signed(d >>> 4) & 1) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1));
        p4 = ((((($signed(d >>> 11) & 1) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        check = (data & 31);
        MYHDL28_check = (check == (((((p4 << 4) | (p3 << 3)) | (p2 << 2)) | (p1 << 1)) | p0));
        disable MYHDL39_RETURN;
    end
    if ((type == 3)) begin
        MYHDL28_check = 1'b1;
        disable MYHDL39_RETURN;
    end
    MYHDL28_check = 1'b0;
    disable MYHDL39_RETURN;
end
endfunction

function integer MYHDL29_decode;
    input data;
    integer data;
    input type;
    integer type;
    integer d;
    integer p0;
    integer p1;
    integer p2;
    integer p3;
    integer p4;
    integer pg;
    integer pr;
    integer p;
    integer np;
begin: MYHDL40_RETURN
    if ((type == 0)) begin
        MYHDL29_decode = data;
        disable MYHDL40_RETURN;
    end
    if ((type == 1)) begin
        MYHDL29_decode = $signed(data >>> 1);
        disable MYHDL40_RETURN;
    end
    if ((type == 2)) begin
        d = $signed(data >>> 5);
        p0 = ((((((((((d & 1) ^ ($signed(d >>> 1) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 4) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 11) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 15) & 1));
        p1 = (((((((((d & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1));
        p2 = ((((((((($signed(d >>> 1) & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        p3 = ((((((($signed(d >>> 4) & 1) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1));
        p4 = ((((($signed(d >>> 11) & 1) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        pg = (((((p4 << 4) | (p3 << 3)) | (p2 << 2)) | (p1 << 1)) | p0);
        pr = (data & 31);
        p = (pg ^ pr);
        if ((p == 0)) begin
            MYHDL29_decode = d;
            disable MYHDL40_RETURN;
        end
        np = 0;
        if (((p == 1) || (p == 2) || (p >= 17))) begin
            np = (p - 1);
        end
        if ((p == 4)) begin
            np = 2;
        end
        if ((p == 8)) begin
            np = 3;
        end
        if ((p == 16)) begin
            np = 4;
        end
        if ((p == 3)) begin
            np = 5;
        end
        if (((p >= 5) && (p < 9) && (p != 8))) begin
            np = (p + 1);
        end
        if (((p >= 9) && (p <= 15))) begin
            np = p;
        end
        MYHDL29_decode = $signed((data ^ (1 << np)) >>> 5);
        disable MYHDL40_RETURN;
    end
    if ((type == 3)) begin
        MYHDL29_decode = data;
        disable MYHDL40_RETURN;
    end
    MYHDL29_decode = data;
    disable MYHDL40_RETURN;
end
endfunction

function integer MYHDL30_get_next_encode;
    input enc;
    integer enc;
    integer LAST_ENCODE;
begin: MYHDL41_RETURN
    LAST_ENCODE = 3;
    if ((enc >= 3)) begin
        $write("more:");
        $write(" ");
        $write("%0d", enc);
        $write("\n");
        MYHDL30_get_next_encode = enc;
        disable MYHDL41_RETURN;
    end
    else begin
        $write("enc+1:");
        $write(" ");
        $write("%0d", enc);
        $write("\n");
        MYHDL30_get_next_encode = (enc + 1);
        disable MYHDL41_RETURN;
    end
end
endfunction

function integer MYHDL31_decode;
    input data;
    integer data;
    input type;
    integer type;
    integer d;
    integer p0;
    integer p1;
    integer p2;
    integer p3;
    integer p4;
    integer pg;
    integer pr;
    integer p;
    integer np;
begin: MYHDL42_RETURN
    if ((type == 0)) begin
        MYHDL31_decode = data;
        disable MYHDL42_RETURN;
    end
    if ((type == 1)) begin
        MYHDL31_decode = $signed(data >>> 1);
        disable MYHDL42_RETURN;
    end
    if ((type == 2)) begin
        d = $signed(data >>> 5);
        p0 = ((((((((((d & 1) ^ ($signed(d >>> 1) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 4) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 11) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 15) & 1));
        p1 = (((((((((d & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1));
        p2 = ((((((((($signed(d >>> 1) & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        p3 = ((((((($signed(d >>> 4) & 1) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1));
        p4 = ((((($signed(d >>> 11) & 1) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        pg = (((((p4 << 4) | (p3 << 3)) | (p2 << 2)) | (p1 << 1)) | p0);
        pr = (data & 31);
        p = (pg ^ pr);
        if ((p == 0)) begin
            MYHDL31_decode = d;
            disable MYHDL42_RETURN;
        end
        np = 0;
        if (((p == 1) || (p == 2) || (p >= 17))) begin
            np = (p - 1);
        end
        if ((p == 4)) begin
            np = 2;
        end
        if ((p == 8)) begin
            np = 3;
        end
        if ((p == 16)) begin
            np = 4;
        end
        if ((p == 3)) begin
            np = 5;
        end
        if (((p >= 5) && (p < 9) && (p != 8))) begin
            np = (p + 1);
        end
        if (((p >= 9) && (p <= 15))) begin
            np = p;
        end
        MYHDL31_decode = $signed((data ^ (1 << np)) >>> 5);
        disable MYHDL42_RETURN;
    end
    if ((type == 3)) begin
        MYHDL31_decode = data;
        disable MYHDL42_RETURN;
    end
    MYHDL31_decode = data;
    disable MYHDL42_RETURN;
end
endfunction

function integer MYHDL32_decode;
    input data;
    integer data;
    input [3-1:0] type;
    integer d;
    integer p0;
    integer p1;
    integer p2;
    integer p3;
    integer p4;
    integer pg;
    integer pr;
    integer p;
    integer np;
begin: MYHDL43_RETURN
    if ((type == 0)) begin
        MYHDL32_decode = data;
        disable MYHDL43_RETURN;
    end
    if ((type == 1)) begin
        MYHDL32_decode = $signed(data >>> 1);
        disable MYHDL43_RETURN;
    end
    if ((type == 2)) begin
        d = $signed(data >>> 5);
        p0 = ((((((((((d & 1) ^ ($signed(d >>> 1) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 4) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 11) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 15) & 1));
        p1 = (((((((((d & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1));
        p2 = ((((((((($signed(d >>> 1) & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        p3 = ((((((($signed(d >>> 4) & 1) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1));
        p4 = ((((($signed(d >>> 11) & 1) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        pg = (((((p4 << 4) | (p3 << 3)) | (p2 << 2)) | (p1 << 1)) | p0);
        pr = (data & 31);
        p = (pg ^ pr);
        if ((p == 0)) begin
            MYHDL32_decode = d;
            disable MYHDL43_RETURN;
        end
        np = 0;
        if (((p == 1) || (p == 2) || (p >= 17))) begin
            np = (p - 1);
        end
        if ((p == 4)) begin
            np = 2;
        end
        if ((p == 8)) begin
            np = 3;
        end
        if ((p == 16)) begin
            np = 4;
        end
        if ((p == 3)) begin
            np = 5;
        end
        if (((p >= 5) && (p < 9) && (p != 8))) begin
            np = (p + 1);
        end
        if (((p >= 9) && (p <= 15))) begin
            np = p;
        end
        MYHDL32_decode = $signed((data ^ (1 << np)) >>> 5);
        disable MYHDL43_RETURN;
    end
    if ((type == 3)) begin
        MYHDL32_decode = data;
        disable MYHDL43_RETURN;
    end
    MYHDL32_decode = data;
    disable MYHDL43_RETURN;
end
endfunction

function integer MYHDL33_decode;
    input data;
    integer data;
    input [3-1:0] type;
    integer d;
    integer p0;
    integer p1;
    integer p2;
    integer p3;
    integer p4;
    integer pg;
    integer pr;
    integer p;
    integer np;
begin: MYHDL44_RETURN
    if ((type == 0)) begin
        MYHDL33_decode = data;
        disable MYHDL44_RETURN;
    end
    if ((type == 1)) begin
        MYHDL33_decode = $signed(data >>> 1);
        disable MYHDL44_RETURN;
    end
    if ((type == 2)) begin
        d = $signed(data >>> 5);
        p0 = ((((((((((d & 1) ^ ($signed(d >>> 1) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 4) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 11) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 15) & 1));
        p1 = (((((((((d & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1));
        p2 = ((((((((($signed(d >>> 1) & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        p3 = ((((((($signed(d >>> 4) & 1) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1));
        p4 = ((((($signed(d >>> 11) & 1) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        pg = (((((p4 << 4) | (p3 << 3)) | (p2 << 2)) | (p1 << 1)) | p0);
        pr = (data & 31);
        p = (pg ^ pr);
        if ((p == 0)) begin
            MYHDL33_decode = d;
            disable MYHDL44_RETURN;
        end
        np = 0;
        if (((p == 1) || (p == 2) || (p >= 17))) begin
            np = (p - 1);
        end
        if ((p == 4)) begin
            np = 2;
        end
        if ((p == 8)) begin
            np = 3;
        end
        if ((p == 16)) begin
            np = 4;
        end
        if ((p == 3)) begin
            np = 5;
        end
        if (((p >= 5) && (p < 9) && (p != 8))) begin
            np = (p + 1);
        end
        if (((p >= 9) && (p <= 15))) begin
            np = p;
        end
        MYHDL33_decode = $signed((data ^ (1 << np)) >>> 5);
        disable MYHDL44_RETURN;
    end
    if ((type == 3)) begin
        MYHDL33_decode = data;
        disable MYHDL44_RETURN;
    end
    MYHDL33_decode = data;
    disable MYHDL44_RETURN;
end
endfunction

function integer MYHDL34_encode;
    input data;
    integer data;
    input [3-1:0] type;
    integer x;
    integer d;
    integer p0;
    integer p1;
    integer p2;
    integer p3;
    integer p4;
begin: MYHDL45_RETURN
    if ((type == 0)) begin
        MYHDL34_encode = data;
        disable MYHDL45_RETURN;
    end
    if ((type == 1)) begin
        x = data;
        x = x ^ $signed(x >>> 8);
        x = x ^ $signed(x >>> 4);
        x = x ^ $signed(x >>> 2);
        x = x ^ $signed(x >>> 1);
        x = ((~x) & 1);
        MYHDL34_encode = ((data << 1) + x);
        disable MYHDL45_RETURN;
    end
    if ((type == 2)) begin
        d = data;
        p0 = ((((((((((d & 1) ^ ($signed(d >>> 1) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 4) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 11) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 15) & 1));
        p1 = (((((((((d & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1));
        p2 = ((((((((($signed(d >>> 1) & 1) ^ ($signed(d >>> 2) & 1)) ^ ($signed(d >>> 3) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        p3 = ((((((($signed(d >>> 4) & 1) ^ ($signed(d >>> 5) & 1)) ^ ($signed(d >>> 6) & 1)) ^ ($signed(d >>> 7) & 1)) ^ ($signed(d >>> 8) & 1)) ^ ($signed(d >>> 9) & 1)) ^ ($signed(d >>> 10) & 1));
        p4 = ((((($signed(d >>> 11) & 1) ^ ($signed(d >>> 12) & 1)) ^ ($signed(d >>> 13) & 1)) ^ ($signed(d >>> 14) & 1)) ^ ($signed(d >>> 15) & 1));
        MYHDL34_encode = ((((((d << 5) | (p4 << 4)) | (p3 << 3)) | (p2 << 2)) | (p1 << 1)) | p0);
        disable MYHDL45_RETURN;
    end
    if ((type == 3)) begin
        MYHDL34_encode = data;
        disable MYHDL45_RETURN;
    end
    MYHDL34_encode = data;
    disable MYHDL45_RETURN;
end
endfunction

task MYHDL35_set_encode;
    output [3-1:0] mem;
    input [3-1:0] enc;
begin: MYHDL46_RETURN
    mem[1] <= (enc & 1);
    mem[2] <= ((enc & 2) >>> 1);
end
endtask


always @(posedge clk_i) begin: DFTM_MAIN
    integer iram_current_position;
    integer current_encode;
    integer is_dynamic;
    reg [3-1:0] ram_inf;
    reg decode_ok;
    integer next_encode;
    reg recode;
    integer recoding_current_address;
    integer r_count;
    if ((current_operation_mode == 2'b00)) begin
        if (host_intf_dftm_i) begin
            if (iram_send) begin
                host_intf_done_o <= 1;
                iram_send <= 0;
            end
            else begin
                if (host_intf_rd_i) begin
                    host_intf_data_o <= ram[host_intf_addr_i];
                    host_intf_done_o <= 0;
                    iram_send <= 1;
                end
                if (host_intf_wr_i) begin
                    ram[host_intf_addr_i] <= host_intf_data_i;
                    $write("WR");
                    $write(" ");
                    $write("%h", host_intf_addr_i);
                    $write(" ");
                    $write("-");
                    $write(" ");
                    $write("%h", host_intf_data_i);
                    $write("\n");
                    host_intf_done_o <= 0;
                    iram_send <= 1;
                end
            end
        end
        else begin
            iram_current_position = MYHDL25_get_position(host_intf_addr_i, 256);
            current_encode = 0;
            is_dynamic = 0;
            // Accessing a area major than managed, we will read without encode
            if ((iram_current_position < 256)) begin
                ram_inf = ram[iram_current_position];
                is_dynamic = MYHDL26_get_configuration(ram_inf);
                is_dynamic = 1;
                current_encode = MYHDL27_get_encode(ram_inf);
            end
            host_intf_sdram_addr_i <= host_intf_addr_i;
            host_intf_sdram_rd_i <= host_intf_rd_i;
            host_intf_sdram_wr_i <= host_intf_wr_i;
            host_intf_sdram_data_i <= host_intf_data_i;
            if ((host_intf_sdram_rdPending_o == 1)) begin
                in_read <= 1;
            end
            if (host_intf_sdram_done_o) begin
                if ((in_read == 0)) begin
                    host_intf_done_o <= host_intf_sdram_done_o;
                end
                else begin
                    in_read <= 0;
                    decode_ok = MYHDL28_check(host_intf_sdram_done_o, current_encode);
                    if ((host_intf_addr_i == 120)) begin
                        decode_ok = 0;
                    end
                    if (decode_ok) begin
                        host_intf_data_o <= MYHDL29_decode(host_intf_sdram_data_o, current_encode);
                        host_intf_done_o <= host_intf_sdram_done_o;
                    end
                    else begin
                        next_encode = MYHDL30_get_next_encode(current_encode);
                        recode = ((next_encode != current_encode) && (is_dynamic == 1));
                        $write("will recode:");
                        $write(" ");
                        if (recode)
                            $write("True");
                        else
                            $write("False");
                        $write("\n");
                        $write("Code?:");
                        $write(" ");
                        if ((next_encode != current_encode))
                            $write("True");
                        else
                            $write("False");
                        $write("\n");
                        $write("Dyn?:");
                        $write(" ");
                        $write("%0d", is_dynamic);
                        $write("\n");
                        if (recode) begin
                            current_operation_mode <= 2'b01;
                            current_recoding_mode <= 3'b000;
                            recode_position <= iram_current_position;
                            recode_address <= host_intf_addr_i;
                            recode_from_ecc <= current_encode;
                            recode_to_ecc <= next_encode;
                            recode_count <= 0;
                            host_intf_done_o <= 1'b0;
                            host_intf_sdram_rd_i <= 1'b0;
                        end
                        else begin
                            host_intf_data_o <= MYHDL31_decode(host_intf_sdram_data_o, current_encode);
                            host_intf_done_o <= host_intf_sdram_done_o;
                            in_read <= 0;
                        end
                    end
                end
            end
            else begin
                host_intf_done_o <= host_intf_sdram_done_o;
            end
        end
    end
    else begin
        if (((recode_count == 0) && (current_recoding_mode == 3'b000))) begin
            $write("STARTING RECODING pos:");
            $write(" ");
            $write("%h", recode_position);
            $write(" ");
            $write(", FROM ECC ");
            $write(" ");
            $write("%h", recode_from_ecc);
            $write(" ");
            $write(", to:");
            $write(" ");
            $write("%h", recode_to_ecc);
            $write("\n");
        end
        recoding_current_address = ((recode_position * 256) + recode_count);
        $write("RECODING ");
        $write(" ");
        $write("%h", recode_position);
        $write(" ");
        $write(" - ");
        $write(" ");
        $write("%h", recode_count);
        $write(" ");
        $write(" - ");
        $write(" ");
        $write("%0d", recoding_current_address);
        $write("\n");
        if ((current_recoding_mode == 3'b000)) begin
            $write("%h", current_recoding_mode);
            $write(" ");
            $write("%0d", recoding_current_address);
            $write("\n");
            host_intf_sdram_addr_i <= recoding_current_address;
            host_intf_sdram_rd_i <= 1;
            current_recoding_mode <= 3'b001;
        end
        if ((current_recoding_mode == 3'b001)) begin
            host_intf_sdram_rd_i <= 0;
            $write("%h", current_recoding_mode);
            $write("\n");
            if (host_intf_sdram_done_o) begin
                current_recoding_mode <= 3'b010;
                recode_data_o <= MYHDL32_decode(host_intf_sdram_data_o, recode_from_ecc);
                recode_data_o <= (MYHDL33_decode(host_intf_sdram_data_o, recode_from_ecc) + 1);
                if ((recode_address == host_intf_sdram_addr_i)) begin
                    recode_original_data <= host_intf_sdram_data_o;
                end
                // TODO IGNORING THE DECODE ERROR - Having not todo here ... 
                $write("RECODING READ ");
                $write(" ");
                $write("%h", host_intf_sdram_data_o);
                $write("\n");
            end
        end
        if ((current_recoding_mode == 3'b010)) begin
            $write("%h", current_recoding_mode);
            $write("\n");
            host_intf_sdram_addr_i <= recoding_current_address;
            host_intf_sdram_data_i <= MYHDL34_encode(recode_data_o, recode_to_ecc);
            $write("RECODING WRITE ");
            $write(" ");
            $write("%h", host_intf_sdram_data_o);
            $write("\n");
            current_recoding_mode <= 3'b011;
        end
        if ((current_recoding_mode == 3'b011)) begin
            $write("%h", current_recoding_mode);
            $write("\n");
            host_intf_sdram_wr_i <= 1;
            if (host_intf_sdram_done_o) begin
                host_intf_sdram_rd_i <= 0;
                host_intf_sdram_wr_i <= 0;
                r_count = (recode_count + 1);
                if ((r_count < 256)) begin
                    current_recoding_mode <= 3'b100;
                    recode_count <= r_count;
                end
                else begin
                    // RECODING DONE
                    host_intf_data_o <= recode_original_data;
                    host_intf_sdram_data_o <= recode_original_data;
                    host_intf_done_o <= 1'b1;
                    current_operation_mode <= 2'b00;
                    ram_inf = ram[recode_position];
                    MYHDL35_set_encode(ram_inf, recode_to_ecc);
                    $write("Change encode pos:");
                    $write(" ");
                    $write("%h", recode_position);
                    $write(" ");
                    $write(", from:");
                    $write(" ");
                    $write("%h", recode_from_ecc);
                    $write(" ");
                    $write(",to:");
                    $write(" ");
                    $write("%h", recode_to_ecc);
                    $write("\n");
                end
            end
        end
        // Need wait 2 cycle to wait the WRITE really happen
        if ((current_recoding_mode == 3'b100)) begin
            current_recoding_mode <= 3'b101;
        end
        if ((current_recoding_mode == 3'b101)) begin
            current_recoding_mode <= 3'b000;
        end
    end
end

endmodule
